version: '3'
services:
  strapi:
    image: ghcr.io/principalstudio/<project key>-docker
    container_name: <put strapi container name here>
    restart: unless-stopped
    environment:
      NODE_ENV: production
      URL: '<put Strapi URL here>'
      ADMIN_URL: '<put Strapi admin URL here>'
      DATABASE_CLIENT: postgres
      DATABASE_NAME: strapi
      DATABASE_HOST: <if running postgres in a container, put `postgres` here. Else put host machine IP here>
      DATABASE_PORT: 5432
      DATABASE_USERNAME: <put database username here>
      DATABASE_PASSWORD: <put database password here>
      SENDGRID_API_KEY: <put sendgrid API key here or empty string>
      SENDGRID_EMAIL_FROM: <put sendgrid from email here or empty string>
      CACHE_ENABLED: 1
      CACHE_TYPE: mem
      CACHE_MAX: 500
      CACHE_MAX_AGE: 31556952000 # 1 year in ms
      CACHE_LOGS: 1
      CACHE_REDIS_CONFIG: null
      ADMIN_JWT_SECRET: <run `openssl rand 64 | base64` and paste output here>
    # links:
    #   - postgres:postgres
    volumes:
      - ./<put mounted uploads directory here>:/usr/src/app/public/uploads
    ports:
      - '<put container port here>:1337'
    command: 'bash -c "yarn strapi config:restore -f dump.json && yarn start"'

  # TODO: If you REALLY want to run a database in a container, uncomment the following
  #       Service and the `links` option above. Else delete both.
  #       @see https://vsupalov.com/database-in-docker/
  #
  # postgres:
  #   image: postgres
  #   container_name: <put database engine container name here>
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_USER: <put database username here>
  #     POSTGRES_PASSWORD: <put database password here>
  #   volumes:
  #     - ./data:/var/lib/postgresql/data